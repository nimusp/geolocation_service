// Code generated by mockery v2.14.0. DO NOT EDIT.

package database

import (
	context "context"

	storage "github.com/nimusp/geolocation_service/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, data, batchSize
func (_m *Database) Insert(ctx context.Context, data []storage.GeoLocation, batchSize uint) error {
	ret := _m.Called(ctx, data, batchSize)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []storage.GeoLocation, uint) error); ok {
		r0 = rf(ctx, data, batchSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Database_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - data []storage.GeoLocation
//   - batchSize uint
func (_e *Database_Expecter) Insert(ctx interface{}, data interface{}, batchSize interface{}) *Database_Insert_Call {
	return &Database_Insert_Call{Call: _e.mock.On("Insert", ctx, data, batchSize)}
}

func (_c *Database_Insert_Call) Run(run func(ctx context.Context, data []storage.GeoLocation, batchSize uint)) *Database_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]storage.GeoLocation), args[2].(uint))
	})
	return _c
}

func (_c *Database_Insert_Call) Return(_a0 error) *Database_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Select provides a mock function with given fields: ctx, ipAddress
func (_m *Database) Select(ctx context.Context, ipAddress string) (*storage.GeoLocation, error) {
	ret := _m.Called(ctx, ipAddress)

	var r0 *storage.GeoLocation
	if rf, ok := ret.Get(0).(func(context.Context, string) *storage.GeoLocation); ok {
		r0 = rf(ctx, ipAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.GeoLocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type Database_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - ipAddress string
func (_e *Database_Expecter) Select(ctx interface{}, ipAddress interface{}) *Database_Select_Call {
	return &Database_Select_Call{Call: _e.mock.On("Select", ctx, ipAddress)}
}

func (_c *Database_Select_Call) Run(run func(ctx context.Context, ipAddress string)) *Database_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Database_Select_Call) Return(_a0 *storage.GeoLocation, _a1 error) *Database_Select_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
