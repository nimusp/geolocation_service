// Code generated by mockery v2.14.0. DO NOT EDIT.

package importer

import (
	context "context"

	importer "github.com/nimusp/geolocation_service/internal/importer"
	mock "github.com/stretchr/testify/mock"
)

// DataSaver is an autogenerated mock type for the DataSaver type
type DataSaver struct {
	mock.Mock
}

type DataSaver_Expecter struct {
	mock *mock.Mock
}

func (_m *DataSaver) EXPECT() *DataSaver_Expecter {
	return &DataSaver_Expecter{mock: &_m.Mock}
}

// Save provides a mock function with given fields: _a0, _a1, _a2
func (_m *DataSaver) Save(_a0 context.Context, _a1 []importer.GeoLocation, _a2 uint) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []importer.GeoLocation, uint) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataSaver_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type DataSaver_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 []importer.GeoLocation
//  - _a2 uint
func (_e *DataSaver_Expecter) Save(_a0 interface{}, _a1 interface{}, _a2 interface{}) *DataSaver_Save_Call {
	return &DataSaver_Save_Call{Call: _e.mock.On("Save", _a0, _a1, _a2)}
}

func (_c *DataSaver_Save_Call) Run(run func(_a0 context.Context, _a1 []importer.GeoLocation, _a2 uint)) *DataSaver_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]importer.GeoLocation), args[2].(uint))
	})
	return _c
}

func (_c *DataSaver_Save_Call) Return(_a0 error) *DataSaver_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewDataSaver interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataSaver creates a new instance of DataSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataSaver(t mockConstructorTestingTNewDataSaver) *DataSaver {
	mock := &DataSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
